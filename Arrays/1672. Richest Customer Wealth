You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

 

Example 1:

Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
1st customer has wealth = 1 + 2 + 3 = 6
2nd customer has wealth = 3 + 2 + 1 = 6
Both customers are considered the richest with a wealth of 6 each, so return 6.
Example 2:

Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.
Example 3:

Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17
 

Constraints:

m == accounts.length
n == accounts[i].length
1 <= m, n <= 50
1 <= accounts[i][j] <= 100

___________________________________________________________________________________________________-

class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        
        
#         Using extra space and complexity O(n) plus brute force
#         res=[]
#         for n in accounts:
#             res.append(sum(n))
#         return sorted(res)[len(res)-1]
        
#         Using constant space and O(n)
         maxNum=0
         for amount in accounts:
            maxNum=max(sum(amount),maxNum)
         return maxNum
#     One-liner.map() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable  
         return max(map(sum,accounts))
          
