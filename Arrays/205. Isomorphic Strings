Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

_____________________________________________________________________________________

class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        mapS_t={}
        mapT_s={}
#       Use zip to create tuples from 2 iterators
        for i,j in zip(s,t):
#         If no mapping exists in either of dictionaries
            if (i not in mapS_t) and (j not in mapT_s):
                mapS_t[i]=j
                mapT_s[j]=i
            
#             If mapping doesn't exist in the dictionaries/ mapping exists but doesn't match
#               in either dictionaries or both
            elif mapS_t.get(i) != j or mapT_s.get(j) != i:
                return False
        return True
