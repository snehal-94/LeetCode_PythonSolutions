Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

____________________________________________________________________________________________________________________________

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
#         Brute Force O(n^2)
        elementFreq={}
        for i in range(0,len(nums)-1):
            for j in range(i+1,len(nums)):
                if(nums[i]==nums[j]):
                    if nums[i] not in elementFreq:
                        elementFreq[nums[i]]=1
                    else:
                        elementFreq[nums[i]]+=1
        return sum(elementFreq.values())
        
     #       Counter
        # freq=Counter(nums)
        # res=0
        # for i in freq.values():
        #     res+=sum(range(i))
        # return res
#       Hashmap
#         Explanation: When in [1,2,3,1,1,3] first 1 comes, no pair is present. When 2nd 1 comes, 1 pair is created which is basically value of the hashmap.
#        When 3rd 1 comes, value hashmap is already 2 because of the last 2 1's. So, 2 pairs possible hence total is 1+2 for the 1's. Same for rest. O(n) complexity.
        count=0
        hashMap={}
        for num in nums:
            if num not in hashMap:
                hashMap[num]=1
            else:
                count+=hashMap[num]
                hashMap[num]+=1
        return count
                
#        One liner
        return sum(n*(n-1)//2 for n in Counter(nums).values())
