Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6

_____________________________________________________________________________________

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
#        Brute force- Taking extra space
#         res=[0]*len(nums)
#         for i,num in enumerate(nums):
#             res[i]=sum(nums[:i])+num
#         return res
            
#     Constant space- updating same list
        # sum=0
        # for i,num in enumerate(nums):
        #     sum+=num
        #     nums[i]=sum
        # return nums
#     one liner
        return [sum(nums[:i])+num for i,num in enumerate(nums) ]
